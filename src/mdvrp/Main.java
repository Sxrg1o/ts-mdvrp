package mdvrp;

import mdvrp.model.CustomerPart;
import mdvrp.planner.TabuSearchPlanner;
import mdvrp.simulation.Simulator;
import mdvrp.state.GlobalState;
import mdvrp.ui.SimulationVisualizer;

import java.util.List;

public class Main {
    public static void main(String[] args) {
        try {
            // 1. Inicializar el Estado Global
            GlobalState.initialize("pedidos.txt", "bloqueos.txt");

            // 2. Crear instancias de los componentes principales
            TabuSearchPlanner planner = new TabuSearchPlanner();
            Simulator simulator = new Simulator(planner); // Pasar el planner al simulador

            // 3. Configurar y correr la simulaci√≥n
            int simulationDuration = 40 * 24 * 60; // 1 semana (ejemplo)
            boolean enableReplanning = true;
            Simulator.runSimulation(simulationDuration, enableReplanning);

            // 4. Planificaci√≥n Final (Opcional, si quedan partes no servidas)
            // N√≥tese que getUnservedCustomerParts fue movido a Simulator, ¬øquiz√°s deber√≠a estar en GlobalState o Utils?
            // Accedamos a trav√©s de GlobalState por simplicidad ahora.
            List<CustomerPart> finalUnserved = GlobalState.activeCustomerParts; // O una copia si se modifica

            // La replanificaci√≥n ya se hizo durante la simulaci√≥n.
            // ¬øRealmente necesitamos una planificaci√≥n final separada?
            // Si la simulaci√≥n se detuvo con partes activas, podr√≠a tener sentido.
            // Comentemos la planificaci√≥n final por ahora, ya que la replanificaci√≥n est√° activa.
        /*
        PlanningSolution finalSolution = null;
        if (!finalUnserved.isEmpty()) {
            System.out.println("\nüöÄ Planificaci√≥n Final de partes restantes... (" + finalUnserved.size() + ")");
            // Usar el tiempo final de la simulaci√≥n como referencia?
            finalSolution = planner.planRoutes(finalUnserved, GlobalState.currentSimTime);
            // ¬øAplicar esta soluci√≥n final? No se simular√° m√°s.
             if (finalSolution != null) {
                System.out.println("  Soluci√≥n Final | Costo: " + SimulationUtils.formatCost(finalSolution.totalCost) + " | Sin Asignar: " + finalSolution.unassignedParts.size());
                // Podr√≠amos fusionar esta soluci√≥n con el historial para visualizaci√≥n? Complejo.
            }
        } else {
            System.out.println("‚úÖ Todas las partes fueron atendidas o asignadas durante la simulaci√≥n.");
        }
        */

            if (!finalUnserved.isEmpty()) {
                System.out.println(" T_T Quedaron " + finalUnserved.size() + " partes sin servir al final de la simulaci√≥n.");
                // Imprimir detalles si se desea
            } else {
                System.out.println("‚úÖ Todas las partes activas fueron atendidas.");
            }


            // 5. Visualizar el resultado final (historial de rutas)
            System.out.println("\nüìà Mostrando visualizaci√≥n del historial de rutas...");
            SimulationVisualizer.visualizeSolution();


        } catch (Exception e) {
            System.err.println("Error fatal en la aplicaci√≥n:");
            e.printStackTrace();
        } finally {
            System.out.println("\nPrograma terminado.");
        }
    }
}
